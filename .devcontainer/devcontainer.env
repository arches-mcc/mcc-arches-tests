# Edit this file and save as ".env" for use.

###COMPOSE_PROJECT_NAME=arches_slocal
TZ=America/Toronto

# Django base config
DJANGO_MODE=DEV
DJANGO_DEBUG=True
# Don't change the port, since it's pretty hard-coded.
DJANGO_PORT=8000
DOMAIN_NAMES=arches-demo-01.lh.pitpie.com localhost 0.0.0.0 127.0.0.1


#arches project and paths
ARCHES_PROJECT=arches_slocal
ARCHES_ROOT=/workspace/arches_root
APP_ROOT=$ARCHES_ROOT/$ARCHES_PROJECT
APP_COMP_FOLDER=$APP_ROOT/$ARCHES_PROJECT

#Arches configs
# NOTE: the ARCHES_NAMESPACE needs to look like a URL, ending in a '/',
# with the same port as used by the Arches Django APP.
ARCHES_NAMESPACE='http://$ARCHES_PROJECT:$DJANGO_PORT/'
# This will hopefully make the yarn build not fail.
NODE_OPTIONS='--max-old-space-size=1024'
INSTALL_DEFAULT_GRAPHS=True
INSTALL_DEFAULT_CONCEPTS=True
# Don't change these, because I can't figure out how dynamically pass
# a new database password to Postgres via docker compose. If you change
# something like the PGPASSWORD, be sure to change it in the corresponding
# value in the docker-compse.yml for the Postgres container.
PGUSERNAME=postgres
PGPASSWORD=postgis
# PGPASSWORD=$USERNAME
PGDBNAME=arches_mcc_dev #arches_slocal
PGHOST=arches_db_dev
PGPORT=5432
#- PGUSER=$PGUSERNAME #postgres
POSTGRES_USER=$PGUSERNAME #postgres
POSTGRES_PASSWORD=$PGPASSWORD #postgis
POSTGRES_DB=$PGDBNAME #postgres

ESHOST=arches_elasticsearch
ESPORT=9200
# NOTE: Only set BUILD_PRODUCTION=True if you have well over
# 8GB of system RAM. Otherwise, yarn will likely error out.
BUILD_PRODUCTION=False
PYTHONUNBUFFERED=0
ELASTICSEARCH_PREFIX=$ARCHES_PROJECT #arches_slocal

# RabbitMQ credentials. We're currently using Redis as a task
# broker, not RabbitMQ, so these are commented out.
# RABBITMQ_USER=guest
# RABBITMQ_PASS=guest

# The DATABASE_URL is a convenience consolidated way help connect to Postgresql
# pg_featureserv and tileserv
DATABASE_URL=postgresql://$PGUSERNAME:$PGPASSWORD@$PGHOST/$PGDBNAME
